#!/bin/tcsh -xef

echo "auto-generated by afni_proc.py, Sat Jan 27 10:42:21 2018"
echo "(version 6.02, December 12, 2017)"
echo "execution started: `date`"

# execute via : 
#   tcsh -xef /data/chaiy3/7T_visual/171222Subj04_KEN_AND1/proc.checker.noscale |& tee /data/chaiy3/7T_visual/171222Subj04_KEN_AND1/output.proc.checker.noscale

# =========================== auto block: setup ============================
# script setup

# take note of the AFNI version
afni -ver

# check that the current AFNI version is recent enough
afni_history -check_date 23 Sep 2016
if ( $status ) then
    echo "** this script requires newer AFNI binaries (than 23 Sep 2016)"
    echo "   (consider: @update.afni.binaries -defaults)"
    exit
endif

# the user may specify a single subject to run with
if ( $#argv > 0 ) then
    set subj = $argv[1]
else
    set subj = checker
endif

# assign output directory name
set output_dir = /data/chaiy3/7T_visual/171222Subj04_KEN_AND1/checker.noscale.results

# verify that the results directory does not yet exist
if ( -d $output_dir ) then
    echo output dir "$subj.results" already exists
    exit
endif

# set list of runs
set runs = (`count -digits 2 1 2`)

# create results and stimuli directories
mkdir $output_dir
mkdir $output_dir/stimuli

# copy stim files into stimulus directory
cp /data/chaiy3/7T_visual/171222Subj04_KEN_AND1/Stim/checker_01Hz_dis4TR.txt         \
    /data/chaiy3/7T_visual/171222Subj04_KEN_AND1/Stim/checker_05Hz_dis4TR.txt        \
    /data/chaiy3/7T_visual/171222Subj04_KEN_AND1/Stim/checker_10Hz_dis4TR.txt        \
    /data/chaiy3/7T_visual/171222Subj04_KEN_AND1/Stim/checker_20Hz_dis4TR.txt        \
    /data/chaiy3/7T_visual/171222Subj04_KEN_AND1/Stim/checker_30Hz_dis4TR.txt        \
    /data/chaiy3/7T_visual/171222Subj04_KEN_AND1/Stim/checker_vigilance_dis4TR.txt   \
    /data/chaiy3/7T_visual/171222Subj04_KEN_AND1/Stim/checker_01Hz_dis4TR_onset.txt  \
    /data/chaiy3/7T_visual/171222Subj04_KEN_AND1/Stim/checker_05Hz_dis4TR_onset.txt  \
    /data/chaiy3/7T_visual/171222Subj04_KEN_AND1/Stim/checker_10Hz_dis4TR_onset.txt  \
    /data/chaiy3/7T_visual/171222Subj04_KEN_AND1/Stim/checker_20Hz_dis4TR_onset.txt  \
    /data/chaiy3/7T_visual/171222Subj04_KEN_AND1/Stim/checker_30Hz_dis4TR_onset.txt  \
    /data/chaiy3/7T_visual/171222Subj04_KEN_AND1/Stim/checker_01Hz_dis4TR_offset.txt \
    /data/chaiy3/7T_visual/171222Subj04_KEN_AND1/Stim/checker_05Hz_dis4TR_offset.txt \
    /data/chaiy3/7T_visual/171222Subj04_KEN_AND1/Stim/checker_10Hz_dis4TR_offset.txt \
    /data/chaiy3/7T_visual/171222Subj04_KEN_AND1/Stim/checker_20Hz_dis4TR_offset.txt \
    /data/chaiy3/7T_visual/171222Subj04_KEN_AND1/Stim/checker_30Hz_dis4TR_offset.txt \
    $output_dir/stimuli

# copy anatomy to results dir
3dcopy /data/chaiy3/7T_visual/171222Subj04_KEN_AND1/SUMA/brain.nii \
    $output_dir/brain

# will extract automatic -blip_forward_dset in tcat block, below

# copy external -blip_reverse_dset dataset
3dTcat -prefix $output_dir/blip_reverse \
    /data/chaiy3/7T_visual/171222Subj04_KEN_AND1/Func/encoddirreverse_mb_09mm_mb2_pat3-00001s011a001.nii.gz

# ============================ auto block: tcat ============================
# apply 3dTcat to copy input dsets to results dir, while
# removing the first 4 TRs
3dTcat -prefix $output_dir/pb00.$subj.r01.tcat \
    /data/chaiy3/7T_visual/171222Subj04_KEN_AND1/Func/checkerflicker1_mb_09mm_mb2_pat3-00001s007a001.nii'[4..$]'
3dTcat -prefix $output_dir/pb00.$subj.r02.tcat \
    /data/chaiy3/7T_visual/171222Subj04_KEN_AND1/Func/checkerflicker2_mb_09mm_mb2_pat3-00001s013a001.nii'[4..$]'

# and make note of repetitions (TRs) per run
set tr_counts = ( 242 242 )

# -------------------------------------------------------
# enter the results directory (can begin processing data)
cd $output_dir


# -------------------------------------------------------
# extract initial volumes as automatic -blip_forward_dset
3dTcat -prefix blip_forward pb00.$subj.r01.tcat+orig"[0..9]"

# ========================== auto block: outcount ==========================
# data check: compute outlier fraction for each volume
touch out.pre_ss_warn.txt
foreach run ( $runs )
    3dToutcount -automask -fraction -polort 5 -legendre                     \
                pb00.$subj.r$run.tcat+orig > outcount.r$run.1D

    # censor outlier TRs per run, ignoring the first 0 TRs
    # - censor when more than 0.1 of automask voxels are outliers
    # - step() defines which TRs to remove via censoring
    1deval -a outcount.r$run.1D -expr "1-step(a-0.1)" > rm.out.cen.r$run.1D

    # outliers at TR 0 might suggest pre-steady state TRs
    if ( `1deval -a outcount.r$run.1D"{0}" -expr "step(a-0.4)"` ) then
        echo "** TR #0 outliers: possible pre-steady state TRs in run $run" \
            >> out.pre_ss_warn.txt
    endif
end

# catenate outlier counts into a single time series
cat outcount.r*.1D > outcount_rall.1D

# catenate outlier censor files into a single time series
cat rm.out.cen.r*.1D > outcount_${subj}_censor.1D

# get run number and TR index for minimum outlier volume
set minindex = `3dTstat -argmin -prefix - outcount_rall.1D\'`
set ovals = ( `1d_tool.py -set_run_lengths $tr_counts                       \
                          -index_to_run_tr $minindex` )
# save run and TR indices for extraction of vr_base_min_outlier
set minoutrun = $ovals[1]
set minouttr  = $ovals[2]
echo "min outlier: run $minoutrun, TR $minouttr" | tee out.min_outlier.txt

# ================================== blip ==================================
# compute blip up/down non-linear distortion correction for EPI

# create median datasets from forward and reverse time series
3dTstat -median -prefix rm.blip.med.fwd blip_forward+orig
3dTstat -median -prefix rm.blip.med.rev blip_reverse+orig

# automask the median datasets 
3dAutomask -apply_prefix rm.blip.med.masked.fwd rm.blip.med.fwd+orig
3dAutomask -apply_prefix rm.blip.med.masked.rev rm.blip.med.rev+orig

# compute the midpoint warp between the median datasets
3dQwarp -plusminus -pmNAMES Rev For                           \
        -pblur 0.05 0.05 -blur -1 -1                          \
        -noweight -minpatch 9                                 \
        -source rm.blip.med.masked.rev+orig                   \
        -base   rm.blip.med.masked.fwd+orig                   \
        -prefix blip_warp

# warp median datasets (forward and each masked) for QC checks
3dNwarpApply -quintic -nwarp blip_warp_For_WARP+orig          \
             -source rm.blip.med.fwd+orig                     \
             -prefix blip_med_for

3dNwarpApply -quintic -nwarp blip_warp_For_WARP+orig          \
             -source rm.blip.med.masked.fwd+orig              \
             -prefix blip_med_for_masked

3dNwarpApply -quintic -nwarp blip_warp_Rev_WARP+orig          \
             -source rm.blip.med.masked.rev+orig              \
             -prefix blip_med_rev_masked

# warp EPI time series data
foreach run ( $runs )
    3dNwarpApply -quintic -nwarp blip_warp_For_WARP+orig      \
                 -source pb00.$subj.r$run.tcat+orig           \
                 -prefix pb01.$subj.r$run.blip
end

# --------------------------------
# extract volreg registration base
3dbucket -prefix vr_base_min_outlier                          \
    pb01.$subj.r$minoutrun.blip+orig"[$minouttr]"

# ================================= align ==================================
# for e2a: compute anat alignment transformation to EPI registration base
# (new anat will be current brain+orig)
align_epi_anat.py -anat2epi -anat brain+orig     \
       -suffix _al_junk                          \
       -epi vr_base_min_outlier+orig -epi_base 0 \
       -epi_strip 3dAutomask                     \
       -anat_has_skull no                        \
       -volreg off -tshift off

# ================================= volreg =================================
# align each dset to base volume, blip warp, align to anat
# (final warp input is same as blip input)

# register and warp
foreach run ( $runs )
    # register each volume to the base
    3dvolreg -verbose -zpad 1 -base vr_base_min_outlier+orig              \
             -1Dfile dfile.r$run.1D -prefix rm.epi.volreg.r$run           \
             -cubic                                                       \
             -1Dmatrix_save mat.r$run.vr.aff12.1D                         \
             pb01.$subj.r$run.blip+orig

    # create an all-1 dataset to mask the extents of the warp
    3dcalc -overwrite -a pb01.$subj.r$run.blip+orig -expr 1               \
           -prefix rm.epi.all1

    # catenate blip/volreg/epi2anat xforms
    cat_matvec -ONELINE                                                   \
               brain_al_junk_mat.aff12.1D -I                              \
               mat.r$run.vr.aff12.1D > mat.r$run.warp.aff12.1D

    # apply catenated xform: blip/volreg/epi2anat/NLtlrc
    # then apply non-linear standard-space warp
    3dNwarpApply -master brain+orig -dxyz 0.875                           \
                 -source pb00.$subj.r$run.tcat+orig                       \
                 -nwarp "mat.r$run.warp.aff12.1D blip_warp_For_WARP+orig" \
                 -prefix rm.epi.nomask.r$run

    # warp the all-1 dataset for extents masking 
    3dAllineate -base brain+orig                                          \
                -input rm.epi.all1+orig                                   \
                -1Dmatrix_apply mat.r$run.warp.aff12.1D                   \
                -mast_dxyz 0.875 -final NN -quiet                         \
                -prefix rm.epi.1.r$run

    # make an extents intersection mask of this run
    3dTstat -min -prefix rm.epi.min.r$run rm.epi.1.r$run+orig
end

# make a single file of registration params
cat dfile.r*.1D > dfile_rall.1D

# ----------------------------------------
# create the extents mask: mask_epi_extents+orig
# (this is a mask of voxels that have valid data at every TR)
3dMean -datum short -prefix rm.epi.mean rm.epi.min.r*.HEAD 
3dcalc -a rm.epi.mean+orig -expr 'step(a-0.999)' -prefix mask_epi_extents

# and apply the extents mask to the EPI data 
# (delete any time series with missing data)
foreach run ( $runs )
    3dcalc -a rm.epi.nomask.r$run+orig -b mask_epi_extents+orig           \
           -expr 'a*b' -prefix pb02.$subj.r$run.volreg
end

# warp the volreg base EPI dataset to make a final version
cat_matvec -ONELINE brain_al_junk_mat.aff12.1D -I  > mat.basewarp.aff12.1D

3dAllineate -base brain+orig                                              \
            -input vr_base_min_outlier+orig                               \
            -1Dmatrix_apply mat.basewarp.aff12.1D                         \
            -mast_dxyz 0.875                                              \
            -prefix final_epi_vr_base_min_outlier

# create an anat_final dataset, aligned with stats
3dcopy brain+orig anat_final.$subj

# record final registration costs
3dAllineate -base final_epi_vr_base_min_outlier+orig -allcostX            \
            -input anat_final.$subj+orig |& tee out.allcostX.txt

# ================================== mask ==================================
# create 'full_mask' dataset (union mask)
foreach run ( $runs )
    3dAutomask -dilate 1 -prefix rm.mask_r$run pb02.$subj.r$run.volreg+orig
end

# create union of inputs, output type is byte
3dmask_tool -inputs rm.mask_r*+orig.HEAD -union -prefix full_mask.$subj

# ---- create subject anatomy mask, mask_anat.$subj+orig ----
#      (resampled from aligned anat)
3dresample -master full_mask.$subj+orig -input brain+orig            \
           -prefix rm.resam.anat

# convert to binary anat mask; fill gaps and holes
3dmask_tool -dilate_input 5 -5 -fill_holes -input rm.resam.anat+orig \
            -prefix mask_anat.$subj

# compute overlaps between anat and EPI masks
3dABoverlap -no_automask full_mask.$subj+orig mask_anat.$subj+orig   \
            |& tee out.mask_ae_overlap.txt

# note Dice coefficient of masks, as well
3ddot -dodice full_mask.$subj+orig mask_anat.$subj+orig              \
      |& tee out.mask_ae_dice.txt

# ================================ regress =================================

# compute de-meaned motion parameters (for use in regression)
1d_tool.py -infile dfile_rall.1D -set_nruns 2                              \
           -demean -write motion_demean.1D

# compute motion parameter derivatives (just to have)
1d_tool.py -infile dfile_rall.1D -set_nruns 2                              \
           -derivative -demean -write motion_deriv.1D

# create censor file motion_${subj}_censor.1D, for censoring motion 
1d_tool.py -infile dfile_rall.1D -set_nruns 2                              \
    -show_censor_count -censor_prev_TR                                     \
    -censor_motion 0.3 motion_${subj}

# combine multiple censor files
1deval -a motion_${subj}_censor.1D -b outcount_${subj}_censor.1D           \
       -expr "a*b" > censor_${subj}_combined_2.1D

# note TRs that were not censored
set ktrs = `1d_tool.py -infile censor_${subj}_combined_2.1D                \
                       -show_trs_uncensored encoded`

# ------------------------------
# run the regression analysis
3dDeconvolve -input pb02.$subj.r*.volreg+orig.HEAD                         \
    -censor censor_${subj}_combined_2.1D                                   \
    -polort 5 -float                                                       \
    -num_stimts 22                                                         \
    -stim_times 1 stimuli/checker_01Hz_dis4TR.txt 'BLOCK(16.44,1)'         \
    -stim_label 1 vs01Hz                                                   \
    -stim_times 2 stimuli/checker_05Hz_dis4TR.txt 'BLOCK(16.44,1)'         \
    -stim_label 2 vs05Hz                                                   \
    -stim_times 3 stimuli/checker_10Hz_dis4TR.txt 'BLOCK(16.44,1)'         \
    -stim_label 3 vs10Hz                                                   \
    -stim_times 4 stimuli/checker_20Hz_dis4TR.txt 'BLOCK(16.44,1)'         \
    -stim_label 4 vs20Hz                                                   \
    -stim_times 5 stimuli/checker_30Hz_dis4TR.txt 'BLOCK(16.44,1)'         \
    -stim_label 5 vs30Hz                                                   \
    -stim_times 6 stimuli/checker_vigilance_dis4TR.txt 'GAM'               \
    -stim_label 6 vigilance                                                \
    -stim_times 7 stimuli/checker_01Hz_dis4TR_onset.txt 'GAM'              \
    -stim_label 7 vs01Hz_onset                                             \
    -stim_times 8 stimuli/checker_05Hz_dis4TR_onset.txt 'GAM'              \
    -stim_label 8 vs05Hz_onset                                             \
    -stim_times 9 stimuli/checker_10Hz_dis4TR_onset.txt 'GAM'              \
    -stim_label 9 vs10Hz_onset                                             \
    -stim_times 10 stimuli/checker_20Hz_dis4TR_onset.txt 'GAM'             \
    -stim_label 10 vs20Hz_onset                                            \
    -stim_times 11 stimuli/checker_30Hz_dis4TR_onset.txt 'GAM'             \
    -stim_label 11 vs30Hz_onset                                            \
    -stim_times 12 stimuli/checker_01Hz_dis4TR_offset.txt 'GAM'            \
    -stim_label 12 vs01Hz_offset                                           \
    -stim_times 13 stimuli/checker_05Hz_dis4TR_offset.txt 'GAM'            \
    -stim_label 13 vs05Hz_offset                                           \
    -stim_times 14 stimuli/checker_10Hz_dis4TR_offset.txt 'GAM'            \
    -stim_label 14 vs10Hz_offset                                           \
    -stim_times 15 stimuli/checker_20Hz_dis4TR_offset.txt 'GAM'            \
    -stim_label 15 vs20Hz_offset                                           \
    -stim_times 16 stimuli/checker_30Hz_dis4TR_offset.txt 'GAM'            \
    -stim_label 16 vs30Hz_offset                                           \
    -stim_file 17 motion_demean.1D'[0]' -stim_base 17 -stim_label 17 roll  \
    -stim_file 18 motion_demean.1D'[1]' -stim_base 18 -stim_label 18 pitch \
    -stim_file 19 motion_demean.1D'[2]' -stim_base 19 -stim_label 19 yaw   \
    -stim_file 20 motion_demean.1D'[3]' -stim_base 20 -stim_label 20 dS    \
    -stim_file 21 motion_demean.1D'[4]' -stim_base 21 -stim_label 21 dL    \
    -stim_file 22 motion_demean.1D'[5]' -stim_base 22 -stim_label 22 dP    \
    -jobs 8                                                                \
    -num_glt 5                                                             \
    -gltsym 'SYM: 0.25*vs01Hz +0.25*vs05Hz +0.25*vs10Hz +0.25*vs20Hz'      \
    -glt_label 1 mean_vs01to20Hz                                           \
    -gltsym 'SYM: 0.5*vs05Hz +0.5*vs10Hz'                                  \
    -glt_label 2 mean_vs05to10Hz                                           \
    -gltsym 'SYM: vs01Hz -0.5*vs20Hz -0.5*vs30Hz'                          \
    -glt_label 3 01Hz-h20Hz30Hz                                            \
    -gltsym 'SYM: 0.5*vs01Hz +0.5*vs05Hz -0.5*vs20Hz -0.5*vs30Hz'          \
    -glt_label 4 h0105Hz-h2030Hz                                           \
    -gltsym 'SYM: vs01Hz -vs30Hz'                                          \
    -glt_label 5 01Hz-30Hz                                                 \
    -fout -tout -x1D X.xmat.1D -xjpeg X.jpg                                \
    -x1D_uncensored X.nocensor.xmat.1D                                     \
    -fitts fitts.$subj                                                     \
    -errts errts.${subj}                                                   \
    -cbucket all_betas.$subj                                               \
    -bucket stats.$subj


# if 3dDeconvolve fails, terminate the script
if ( $status != 0 ) then
    echo '---------------------------------------'
    echo '** 3dDeconvolve error, failing...'
    echo '   (consider the file 3dDeconvolve.err)'
    exit
endif


# display any large pairwise correlations from the X-matrix
1d_tool.py -show_cormat_warnings -infile X.xmat.1D |& tee out.cormat_warn.txt

# create an all_runs dataset to match the fitts, errts, etc.
3dTcat -prefix all_runs.$subj pb02.$subj.r*.volreg+orig.HEAD

# --------------------------------------------------
# create a temporal signal to noise ratio dataset 
#    signal: if 'scale' block, mean should be 100
#    noise : compute standard deviation of errts
3dTstat -mean -prefix rm.signal.all all_runs.$subj+orig"[$ktrs]"
3dTstat -stdev -prefix rm.noise.all errts.${subj}+orig"[$ktrs]"
3dcalc -a rm.signal.all+orig                                               \
       -b rm.noise.all+orig                                                \
       -c full_mask.$subj+orig                                             \
       -expr 'c*a/b' -prefix TSNR.$subj 

# ---------------------------------------------------
# compute and store GCOR (global correlation average)
# (sum of squares of global mean of unit errts)
3dTnorm -norm2 -prefix rm.errts.unit errts.${subj}+orig
3dmaskave -quiet -mask full_mask.$subj+orig rm.errts.unit+orig             \
          > gmean.errts.unit.1D
3dTstat -sos -prefix - gmean.errts.unit.1D\' > out.gcor.1D
echo "-- GCOR = `cat out.gcor.1D`"

# ---------------------------------------------------
# compute correlation volume
# (per voxel: average correlation across masked brain)
# (now just dot product with average unit time series)
3dcalc -a rm.errts.unit+orig -b gmean.errts.unit.1D -expr 'a*b' -prefix rm.DP
3dTstat -sum -prefix corr_brain rm.DP+orig

# create ideal files for fixed response stim types
1dcat X.nocensor.xmat.1D'[12]' > ideal_vs01Hz.1D
1dcat X.nocensor.xmat.1D'[13]' > ideal_vs05Hz.1D
1dcat X.nocensor.xmat.1D'[14]' > ideal_vs10Hz.1D
1dcat X.nocensor.xmat.1D'[15]' > ideal_vs20Hz.1D
1dcat X.nocensor.xmat.1D'[16]' > ideal_vs30Hz.1D
1dcat X.nocensor.xmat.1D'[17]' > ideal_vigilance.1D
1dcat X.nocensor.xmat.1D'[18]' > ideal_vs01Hz_onset.1D
1dcat X.nocensor.xmat.1D'[19]' > ideal_vs05Hz_onset.1D
1dcat X.nocensor.xmat.1D'[20]' > ideal_vs10Hz_onset.1D
1dcat X.nocensor.xmat.1D'[21]' > ideal_vs20Hz_onset.1D
1dcat X.nocensor.xmat.1D'[22]' > ideal_vs30Hz_onset.1D
1dcat X.nocensor.xmat.1D'[23]' > ideal_vs01Hz_offset.1D
1dcat X.nocensor.xmat.1D'[24]' > ideal_vs05Hz_offset.1D
1dcat X.nocensor.xmat.1D'[25]' > ideal_vs10Hz_offset.1D
1dcat X.nocensor.xmat.1D'[26]' > ideal_vs20Hz_offset.1D
1dcat X.nocensor.xmat.1D'[27]' > ideal_vs30Hz_offset.1D

# --------------------------------------------------------
# compute sum of non-baseline regressors from the X-matrix
# (use 1d_tool.py to get list of regressor colums)
set reg_cols = `1d_tool.py -infile X.nocensor.xmat.1D -show_indices_interest`
3dTstat -sum -prefix sum_ideal.1D X.nocensor.xmat.1D"[$reg_cols]"

# also, create a stimulus-only X-matrix, for easy review
1dcat X.nocensor.xmat.1D"[$reg_cols]" > X.stim.xmat.1D

# ================== auto block: generate review scripts ===================

# generate a review script for the unprocessed EPI data
gen_epi_review.py -script @epi_review.$subj \
    -dsets pb00.$subj.r*.tcat+orig.HEAD

# generate scripts to review single subject results
# (try with defaults, but do not allow bad exit status)
gen_ss_review_scripts.py -mot_limit 0.3 -out_limit 0.1 -exit0

# ========================== auto block: finalize ==========================

# remove temporary files
\rm -f rm.*

# if the basic subject review script is here, run it
# (want this to be the last text output)
if ( -e @ss_review_basic ) ./@ss_review_basic |& tee out.ss_review.$subj.txt

# return to parent directory
cd ..

echo "execution finished: `date`"




# ==========================================================================
# script generated by the command:
#
# afni_proc.py -subj_id checker -out_dir                                                                      \
#     /data/chaiy3/7T_visual/171222Subj04_KEN_AND1/checker.noscale.results                                    \
#     -script                                                                                                 \
#     /data/chaiy3/7T_visual/171222Subj04_KEN_AND1/proc.checker.noscale                                       \
#     -scr_overwrite -blocks align volreg mask regress -copy_anat                                             \
#     /data/chaiy3/7T_visual/171222Subj04_KEN_AND1/SUMA/brain.nii                                             \
#     -anat_has_skull no -tcat_remove_first_trs 4 -dsets                                                      \
#     /data/chaiy3/7T_visual/171222Subj04_KEN_AND1/Func/checkerflicker1_mb_09mm_mb2_pat3-00001s007a001.nii    \
#     /data/chaiy3/7T_visual/171222Subj04_KEN_AND1/Func/checkerflicker2_mb_09mm_mb2_pat3-00001s013a001.nii    \
#     -volreg_align_to MIN_OUTLIER -volreg_align_e2a -blip_reverse_dset                                       \
#     /data/chaiy3/7T_visual/171222Subj04_KEN_AND1/Func/encoddirreverse_mb_09mm_mb2_pat3-00001s011a001.nii.gz \
#     -regress_stim_times                                                                                     \
#     /data/chaiy3/7T_visual/171222Subj04_KEN_AND1/Stim/checker_01Hz_dis4TR.txt                               \
#     /data/chaiy3/7T_visual/171222Subj04_KEN_AND1/Stim/checker_05Hz_dis4TR.txt                               \
#     /data/chaiy3/7T_visual/171222Subj04_KEN_AND1/Stim/checker_10Hz_dis4TR.txt                               \
#     /data/chaiy3/7T_visual/171222Subj04_KEN_AND1/Stim/checker_20Hz_dis4TR.txt                               \
#     /data/chaiy3/7T_visual/171222Subj04_KEN_AND1/Stim/checker_30Hz_dis4TR.txt                               \
#     /data/chaiy3/7T_visual/171222Subj04_KEN_AND1/Stim/checker_vigilance_dis4TR.txt                          \
#     /data/chaiy3/7T_visual/171222Subj04_KEN_AND1/Stim/checker_01Hz_dis4TR_onset.txt                         \
#     /data/chaiy3/7T_visual/171222Subj04_KEN_AND1/Stim/checker_05Hz_dis4TR_onset.txt                         \
#     /data/chaiy3/7T_visual/171222Subj04_KEN_AND1/Stim/checker_10Hz_dis4TR_onset.txt                         \
#     /data/chaiy3/7T_visual/171222Subj04_KEN_AND1/Stim/checker_20Hz_dis4TR_onset.txt                         \
#     /data/chaiy3/7T_visual/171222Subj04_KEN_AND1/Stim/checker_30Hz_dis4TR_onset.txt                         \
#     /data/chaiy3/7T_visual/171222Subj04_KEN_AND1/Stim/checker_01Hz_dis4TR_offset.txt                        \
#     /data/chaiy3/7T_visual/171222Subj04_KEN_AND1/Stim/checker_05Hz_dis4TR_offset.txt                        \
#     /data/chaiy3/7T_visual/171222Subj04_KEN_AND1/Stim/checker_10Hz_dis4TR_offset.txt                        \
#     /data/chaiy3/7T_visual/171222Subj04_KEN_AND1/Stim/checker_20Hz_dis4TR_offset.txt                        \
#     /data/chaiy3/7T_visual/171222Subj04_KEN_AND1/Stim/checker_30Hz_dis4TR_offset.txt                        \
#     -regress_stim_labels vs01Hz vs05Hz vs10Hz vs20Hz vs30Hz vigilance                                       \
#     vs01Hz_onset vs05Hz_onset vs10Hz_onset vs20Hz_onset vs30Hz_onset                                        \
#     vs01Hz_offset vs05Hz_offset vs10Hz_offset vs20Hz_offset vs30Hz_offset                                   \
#     -regress_basis_multi 'BLOCK(16.44,1)' 'BLOCK(16.44,1)' 'BLOCK(16.44,1)'                                 \
#     'BLOCK(16.44,1)' 'BLOCK(16.44,1)' GAM GAM GAM GAM GAM GAM GAM GAM GAM                                   \
#     GAM GAM -regress_censor_motion 0.3 -regress_censor_outliers 0.1                                         \
#     -regress_opts_3dD -jobs 8 -num_glt 5 -gltsym 'SYM: 0.25*vs01Hz                                          \
#     +0.25*vs05Hz +0.25*vs10Hz +0.25*vs20Hz' -glt_label 1 mean_vs01to20Hz                                    \
#     -gltsym 'SYM: 0.5*vs05Hz +0.5*vs10Hz' -glt_label 2 mean_vs05to10Hz                                      \
#     -gltsym 'SYM: vs01Hz -0.5*vs20Hz -0.5*vs30Hz' -glt_label 3                                              \
#     01Hz-h20Hz30Hz -gltsym 'SYM: 0.5*vs01Hz +0.5*vs05Hz -0.5*vs20Hz                                         \
#     -0.5*vs30Hz' -glt_label 4 h0105Hz-h2030Hz -gltsym 'SYM: vs01Hz -vs30Hz'                                 \
#     -glt_label 5 01Hz-30Hz -regress_make_ideal_sum sum_ideal.1D                                             \
#     -regress_make_cbucket yes
